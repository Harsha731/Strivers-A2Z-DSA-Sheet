Longest Substring Without Repeating Characters
Max Consecutive Ones III
Fruit Into Baskets
All the above 3 are easy


Longest Repeating Character Replacement
we use  maxCount = *max_element(cnt.begin(), cnt.end()); 
and do compression if length - maxCount > k
2nd approach is considering that A is what we needed and we change other letters to A atMost K times and we do for other letters also
This takes O(26N)


Number of Substrings Containing All Three Characters 
1) For every time, we come across a valid sub string, we add n-j (n-1 - j + 1 => n-j)
It is because for a fixed L, we have n-j substrings. It is L dependent
As we decrease L by one each time
2) We store the last index where we have the all three characters available
We do 	1 + min(last[0], min(last[1], last[2]));   to get the strings from L to 0 (L+1 will be there) having a fixed R each time
We add these to count


Maximum Points You Can Obtain from Cards
We can take card from front or back and we take out k cards, so finding the max sum of card numbers is same as finding the minimum subarray sum of window size n-k elements

Longest Substring with At Most K Distinct Characters 
Easy