/*
We can't print the longest sequence, but we can get the length of it O(NlogN) instead of O(N^2)
If arr[i] is > last element of temp,  extend the subsequence
If arr[i] is <= last element of temp, replace the element in temp with arr[i]
If we are not extending and instead replacing, it means this is not the LIS till now, it is another, 
this can be LIS, if there is an extension
{ 1, 7, 8,  4, 5, 6, -1, 9}
temp = { 1, 7, 8 } -> { 1, 4, 8 }  Here 7 gets replaced by 4 as it is the element >= 4
If 4 is there, replace 4 with 4
*/

// Function to find the length of the longest increasing subsequence
int longestIncreasingSubsequence(int arr[], int n) {
    // Create a temporary vector to store the increasing subsequence
    vector<int> temp;
    temp.push_back(arr[0]);

    int len = 1;

    for (int i = 1; i < n; i++) {
        if (arr[i] > temp.back()) {
            // If arr[i] is greater than the last element of temp, extend the subsequence
            temp.push_back(arr[i]);
            len++;
        } else {
            // If arr[i] is not greater, replace the element in temp with arr[i]
            int ind = lower_bound(temp.begin(), temp.end(), arr[i]) - temp.begin();
            temp[ind] = arr[i];
        }
    }

    return len;
}

