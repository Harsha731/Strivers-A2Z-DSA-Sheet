int getBit(int num, int i) {
    return (num & (1 << i));
}

int setBit(int num, int i) {
    return num | (1 << i);
}

int clearBit(int num, int i) {
    return num & ~(1 << i);
}

int toggleBit(int num, int i) {
    return num ^ (1 << i);
}

int updateBit(int num, int i, bool value) {
    num = num & ~(1 << i);  // Clear the bit at position i
    return num | (value << i);  // Set the bit to the desired value
}

int setBit = x & -x; // This isolates the rightmost set bit
// -x is 2's complement. it is inverse + 1. 
// 1's complement is simply inverse
_______________________________________

toggle is 1 0 0 1 0 and 0 0 1 0 0
If 1 is there, then 1 ^ 0 is 1
If 0 is there, then 0 ^ 0 is 0
If 0/1 is there with 1, then it toggles
________________________

Compute XOR from 1 to n (direct method)

We have 4 cases, n%4 = 0 / 1/ 2/ 3
TC : O(1) and SC : O(1)
________________________

Write a program to check if a given number is power of 2

1) Keep dividing by 2 until you get 0, else return false
2) n & n-1 = 0
eg. 1000 and 0111 gives 0000
________________________

Write a program to find the number of ones in binary representation of a number

while (num > 0)
  num = num & (num - 1);  // Clears the least significant set bit
  count++;  
________________________

Write a program to generate all possible subsets of a set {a, b, c}. Down, A.size() is 3 and N is 8

for (int j = 0; j < N; ++j) { 		
     for (int i = 0; i < A.size(); ++i) { 
          if (j >> i & 1) ans[j].push_back(A[i]);
________________________

Bitwise XOR Swap Algorithm :

a = a ^ b;  // Step 1: a becomes a ^ b
b = a ^ b;  // Step 2: b becomes (a ^ b) ^ b = a (b is swapped)
a = a ^ b;  // Step 3: a becomes (a ^ b) ^ a = b (a is swapped)
________________________

XOR of all subsequences of an array :

000, 001, 010, 011, 100, 101, 110, 111
The 1st occurs half times (4/2=2 if 2 elements are there), same with other too
So, when we did XOR of all, it will go away
If only one element is there, then the XOR value is the element itself
________________________

Binary to Decimal :
cout << 0b0110 << endl gives 6

__builtin_clz(x): Count Leading Zeros
__builtin_ctz(x): Count Trailing Zeros
__builtin_popcount(x): Population Count gives the number of 1's
________________________

Equal Sum and XOR :

n + i = n ^ i
It happens only if the n is having 1 at a position and i is having 0
If the n is having 0 at any position, then the i can have either 0 or 1. so 2^x possibilities.
x is number of unset bits
Use a while loop and find unset bits or use inbuilt function
________________________

Flipping a number :W

int allSetBits = (1 << 32) - 1; // All bits set for 32-bit integer
return allSetBits - n; // Flipped number
________________________

Hamming distance :

1) for (int z = x ^ y; z; z >>= 1) ans += z & 1;		// It checks the number of digits times
2) for (int z = x ^ y; z; z &= z - 1) ++ans;			// Each time a one get set to 0. It checks the no. of 1's times
3) return __builtin_popcount(x ^ y);
________________________

Reverse Bits :

for (int i = 0; i < 32; ++i) {
   ans = (ans << 1) | (n & 1);
   n >>= 1;
________________________

14.3 ) Write a program to find a unique number in an array where all numbers except one, are present twice

Simply do XOR of all the numbers to get that unique element
________________________

Write a program to find 2 unique numbers in an array where all numbers except two, are present twice.

1. Take XOR of all numbers, we get a number (a^b) which is != 0, we get its LSB using x&-x
2. We do XOR second time with all the numbers having the set bit, here only one number is solo, and that is our one of the number
3. 1st XOR value ^ 1 unique number = 2nd unique number
________________________

Write a program to find a unique number in an array where all numbers except one, are present thrice.

We traverse through all the numbers in the array for each ith bit and if it is not divisible by 3, then it is in the answer too
for (int i = 0; i < 64; i++) 
	sum = 0;
	for (int j = 0; j < n; j++) 
		if(get()) sum++
		if(sum%3) set()

________________________
